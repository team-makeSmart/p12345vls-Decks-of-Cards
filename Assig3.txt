/**
 * @author Hunter Mason, Jake McGhee, Mac Doussias, Pavlos Papadonikolakis
 * CLASS CST 338
 * Assignment 3, Module 3
 */

import java.util.Scanner; //Allows for scanner objects get keyboard input

public class Assig3
{
   static Scanner scann; //Object to receive keyboard input 
   final static int MAX_HANDS = 10; //Max hands allowed for players

   public static void main(String[] args)
   {  
      // Run tests of classes
      testCard(); // Card class test
      testHand(); // Hand class test
      testDeck(); // Deck class test
      
      // Initialize the scanner
      scann = new Scanner(System.in);
      
      int numPlayers = 0;
      Deck deck = new Deck(); //Create a new deck, defaulted to one deck
      
      // Get the number of players from the user
      while (numPlayers < 1 || numPlayers > 10) 
      {
         System.out.println("\nPlease select the number of players" + 
            " (from 1 to 10):");
         numPlayers = scann.nextInt();
      }
      
      // Create a new (empty) hand for each player
      Hand[] hands = new Hand[numPlayers];
      for (int i = 0; i < hands.length; i++) 
      {
         hands[i] = new Hand();
      }
      
      // ---- UNSHUFFLED HAND ----
      
      // Deal the cards
      dealCards(deck, hands);
      
      System.out.println("\n---------- Here are your hands" + 
         " from an unshuffled deck ----------");
 
      // Display each hand
      displayHands(hands);
      
      // Reset each hand
      for (Hand hand : hands) 
      {
         hand.resetHand();
      }
      
      // ---- SHUFFLED HAND ----
      
      // Reset the deck and shuffle it
      deck = new Deck();
      deck.shuffle();
      
      // Deal the cards
      dealCards(deck, hands);
      
      System.out.println("\n---------- Here are your hands from a " + 
         "shuffled deck ----------");
      
      // Display each hand
      displayHands(hands);
      
      // Close the scanner
      scann.close();
   }
      
      
   /**
    * Deals cards to each hand, one card per hand at a time, 
    * until the deck is empty
    * @param deck - the deck that is being dealt from
    * @param hands - array of Hand objects that the deck is being dealt into
    */
   private static void dealCards(Deck deck, Hand [] hands) 
   {
      Card card;
         
      while (deck.getNumCards() != 0) 
      {
         for (Hand hand : hands) 
         {
            card = deck.dealCard();
            if (!card.getErrorFlag()) 
            {
               hand.takeCard(card);
            }
         }
      }     
   }
      
   /**
    * Used to display an array of hands
    * @param hands - the array of Hand objects that will be displayed
    */
   private static void displayHands(Hand [] hands) 
   {
      for (int i = 0; i < hands.length; i++) 
      {
         System.out.printf("\n----- Hand %d -----"
            + "\n%s\n", i+1, hands[i].toString());
      }  
   }
  
   private enum TestMsgOption { OPEN, CLOSE }; // Used for the method below
   
   /**
    * Used to format the output
    * @param className - the name of the class
    * @param option - whether its an opening or closing message
    */
   private static void testMsg(String className, TestMsgOption option) 
   {
      if (option == TestMsgOption.OPEN) 
      {
         System.out.printf("\n-------------------Testing %s Class-" + 
            "-----------------------\n\n", className);
      } 
      else if (option == TestMsgOption.CLOSE) 
      {
         System.out.printf("--------------- End of %s Class Test ---" +
            "-------------------\n", className);
      }   
   }
   
   /**
    * Method to test the Card class
    * */
   private static void testCard()
   {
      // Display opening message
      testMsg("Card", TestMsgOption.OPEN);
      
      // Create card objects for testing
      Card card1 = new Card('A', Card.Suit.SPADES);
      Card card2 = new Card('s', Card.Suit.SPADES);
      Card card3 = new Card('J', Card.Suit.CLUBS);

      // Check if valid by looking at console output
      System.out.println(card1.toString());
      System.out.println(card2.toString());
      System.out.println(card3.toString());

      // Create a space on console
      System.out.println();

      // Create card objects for testing
      Card card4 = new Card('d', Card.Suit.SPADES);
      Card card5 = new Card('Q', Card.Suit.SPADES);
      Card card6 = new Card('J', Card.Suit.CLUBS);

      // Check if valid by looking at console output
      System.out.println(card4.toString());
      System.out.println(card5.toString());
      System.out.println(card6.toString());
      
      // Display closing message
      testMsg("Card", TestMsgOption.CLOSE);
   }

   /**
    * Method to test the Hand class
    * */
   private static void testHand()
   {
      // Display opening message
      testMsg("Hand", TestMsgOption.OPEN);
      
      // Create a hand object and 4 card objects
      Hand hand1 = new Hand();
      Card card1 = new Card('2', Card.Suit.DIAMONDS);
      Card card2 = new Card('4', Card.Suit.HEARTS);
      Card card3 = new Card('5', Card.Suit.SPADES);
      Card card4 = new Card('T', Card.Suit.CLUBS);

      // Populate the hand with legal and
      // Illegal values
      for (int i = 0; i < 10; i++)
      {
         hand1.takeCard(card1);
         hand1.takeCard(card2);
         hand1.takeCard(card3);
         card3.set('e', Card.Suit.DIAMONDS);
         hand1.takeCard(card3);
         card4.set('w', Card.Suit.DIAMONDS);
         hand1.takeCard(card4);
      }

      // Print to console
      System.out.println(hand1.toString());

      // Inspect Card at last index (first inserted)
      System.out.println("\nTesting inspectCard()");
      System.out.println(hand1.inspectCard(0));

      // Inspect illegal index
      Card test = hand1.inspectCard(50);
      System.out.println(test);

      // Print all individual cards
      while (hand1.getNumOfCards() != 0)
      {
         Card c = hand1.playCard();
         System.out.println("Playing " + c);
      }

      System.out.println("\nAfter playing all cards");
      System.out.println(hand1.toString());
      
     // Display closing message
      testMsg("Hand", TestMsgOption.CLOSE);
   }

   /**
    * Method to test the Deck class
    * */
   private static void testDeck()
   {
     // Display opening message
     testMsg("Deck", TestMsgOption.OPEN);
     
     // Double pack - Unshuffled
     Deck deck = new Deck(2);
     System.out.println("---- Double pack (Unshuffled) ----\n");
     printDeck(deck);
     
     // Double pack - Shuffled
     deck = new Deck(2); 
     deck.shuffle();
     System.out.println("---- Double pack (Shuffled) ----\n");
     printDeck(deck);
     
     // Single pack - Unshuffled
     deck = new Deck(1);
     System.out.println("---- Single pack (Unshuffled) ---- \n");
     printDeck(deck);
     
     // Single pack - Shuffled
     deck = new Deck(1); 
     deck.shuffle();
     System.out.println("---- Single pack (Shuffled) ----\n");
     printDeck(deck);
      
     // Display closing message
      testMsg("Deck", TestMsgOption.CLOSE);
   }
   
   /**
    * Helper method for the testDeck class, since the deck 
    * needs to be printed 4 times
    * Prints out the entire deck to the console
    * @param deck - the deck that will be printed
    */
   private static void printDeck(Deck deck) 
   {
      String outString ="";
      for (int i = deck.getNumCards(); i > 0; i--) 
      {
         outString += deck.dealCard().toString();
         if (i > 1) 
            outString += ", ";
         if (i % 5 == 0) 
            outString += "\n";
      }
          
      System.out.println(outString + "\n\n");
   }
      
}
   
// ------------------------ CARD CLASS ----------------------------------
// Card class is for objects that represent an individual playing card
class Card
{

   /** Constant array of valid card values acceptable for program */
   public static final char[] VALID_CARD_VALUES =
   { '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A' };

   /**
    * Enumerated Suit values
    */
   public enum Suit
   {
      CLUBS, DIAMONDS, HEARTS, SPADES
   }

   /** Card value (e.g. 1,2,3,..., 9, T, J, K Q, A) */
   private char value;

   /** Card suit */
   private Suit suit;

   /**
    * Error flag, keeps track of invalid entries. If true, the 
    * card object does not have valid data
    */
   private boolean errorFlag;

   /**
    * Default Constructor Instantiates a new card as Ace of Spades
    */
   public Card()
   {
      this.value = 'A';
      this.suit = Suit.SPADES;
   }

   /**
    * Constructor Instantiates a new card, by calling the set() method
    * 
    * @param value 
    *    the value
    * @param suit
    *    the suit
    */
   public Card(char value, Suit suit)
   {
      set(value, suit);
   }

   /**
    * Returns a string based on the value and suit instance variables
    */
   public String toString()
   {
      if (errorFlag == true) // Card does not contain valid data
      {
         return "** illegal **"; // Returns an error message
      } else
      {
         // Get char value, convert to string, and store in variable
         String returnValue = String.valueOf(getValue());

         // Concatenate returnValue with a string relating to suit
         if (suit == Suit.SPADES)
            returnValue += " of Spades";
         else if (suit == Suit.HEARTS)
            returnValue += " of Hearts";
         else if (suit == Suit.DIAMONDS)
            returnValue += " of Diamonds";
         else if (suit == Suit.CLUBS)
            returnValue += " of Clubs";

         return returnValue;
      }
   }

   /**
    * Sets the value and the suit
    * @param value
    *    the value
    * @param suit
    *    the suit
    * @return true, if successful
    */
   public boolean set(char value, Suit suit)
   {
      if (!isValid(value, suit))
      {
         errorFlag = true;
         return false;
      }
      this.suit = suit;
      this.value = value;
      errorFlag = false;
      return true;
   }

   /**
    * Gets the errorFlag
    * @return the error flag
    */
   public boolean getErrorFlag()
   {
      return errorFlag;
   }

   /**
    * Gets the suit
    * @return the suit
    */
   public Suit getSuit()
   {
      return this.suit;
   }

   /**
    * Gets the value 
    * @return the value
    */
   public char getValue()
   {
      return value;
   }

   /**
    * Checks for equal values
    */
   @Override
   public boolean equals(Object obj)
   {
      final Card other = (Card) obj;

      if (this == obj)
      {
         return true;
      }

      if (obj == null || getClass() != obj.getClass() || this.value != 
         other.value || this.errorFlag != other.errorFlag || 
         this.suit != other.suit)
      {
         return false;
      }

      return true;
   }

   /**
    * Checks if is the values entered by the user are valid.
    * @param value
    *           the value
    * @param suit
    *           the suit
    * @return true, if all values are valid
    */
   private boolean isValid(char value, Suit suit)
   {
      for (char val : VALID_CARD_VALUES)
      {
         if (value == val)
         {
            return true; // The value arg is found in VALID_CARD_VALUES array
         }
      }
      return false; // The value argument was not found
   }

}

// ------------------------ HAND CLASS ----------------------------------
// Hand class is used for the hand a player (or players) have in a card game
class Hand
{
   /** The max cards in the hand */
   public static final int MAX_CARDS = 60;

   /** holds all the cards */
   private Card[] myCards = new Card[MAX_CARDS];

   /** The number of card in the array. */
   private int numCards;

   /**
    * Default constructor
    */
   public Hand()
   {
      this.numCards = 0;
   }

   /**
    * Removes all cards from the hand
    */
   public void resetHand()
   {
      numCards = 0;
      myCards = new Card[MAX_CARDS];
   }

   /**
    * Adds a card to the next available position in the myCards array
    * @param card
    *           the card
    * @return true, if successful
    */
   public boolean takeCard(Card card)
   {
      if (numCards < MAX_CARDS)
      {
         // Makes copy of new card and stores in index. & Increments numCards.
         myCards[numCards++] = new Card(card.getValue(), card.getSuit());

         if (numCards == MAX_CARDS) // The hand is full
         {
            return false;
         }
      }
      return true;
   }

   /**
    * Returns and removes the card in the top occupied position of the array
    * @return the top card
    */
   public Card playCard()
   {
      Card errorCard = new Card('w', Card.Suit.SPADES);
      if (numCards == 0)
         return errorCard;
      return myCards[--numCards];
   }

   /**
    * Prints value and suit for all the cards in the hand
    */
   public String toString()
   {
      int counter = 0; // Keeps place of cards in the hand
      if (numCards == 0) // There are no cards in the hand
      {
         return "\nHand = (  )";
      } else // There are cards in the hand
      {
         String returnVal = "\nHand = ( ";

         for (int i = 0; i < numCards; i++)
         {
            returnVal += myCards[i].toString();
            if ((counter + 1) != numCards)
               returnVal += ", ";
            counter++;
            // Check if reached end of hand
            if (counter == numCards)
               returnVal += " )";

            // If more than sixth card, go to newline
            if (counter % 6 == 0)
               returnVal += "\n";
         }
         return returnVal;
      }
   }

   /**
    * Gets the number of cards.
    * @return the number of cards
    */
   public int getNumOfCards()
   {
      return numCards;
   }

   /**
    * Accessor for an individual card. Returns a card with 
    * errorFlag = true if k is bad
    * @param k 
    *    the index of the card in the array
    * @return 
    *    the card
    */
   Card inspectCard(int k)
   {
      Card errorCard = new Card('w', Card.Suit.SPADES);
      if (k < 0 || k >= numCards)
         return errorCard;
      return myCards[k];
   }

}

// ------------------------ DECK CLASS ----------------------------------
// Allows for processing of a deck of cards
class Deck
{

   // Holds the amount of unique cards in a deck
   public final static int CARDS_PER_DECK = 52;
   
   // Holds the max cards for all decks.  6 decks permissible
   public final static int MAX_CARDS = CARDS_PER_DECK * 6;
 
   // Holds a master pack of unique card objects
   private static Card[] masterPack = new Card[CARDS_PER_DECK];

   // Array to hold card objects that equal number of packs 
   private Card[] cards = new Card[MAX_CARDS];
   
   // For the top card in the deck
   private int topCard; 
   
   // For of copies of the masterpack 
   private int numPacks;

   /**
    * Constructor 
    * Initializes deck of cards * argument
    * @param numPacks  
    * */
   public Deck(int numPacks)
   {
      this.numPacks = numPacks; // Initialize numPacks with argument
      allocateMasterPack(); // Initialize the masterpack to copy from
      init(this.numPacks);
   }

   /**
    * Default Constructor 
    * Initializes one deck for cards to be used  
    * */
   public Deck()
   {
      this.numPacks = 1; // Will use only one pack as a default
      allocateMasterPack(); // Initialize the masterpack to copy from
      init(numPacks);
   }
   
   /**
    * Creates a masterPack of 52 unique cards with all the valid possible unique
    * combinations of the card values and suits Checks to ensure that it has not
    * been called before by checking if masterPack instance variable array was
    * already initialized. It does not execute if masterPack was already
    * initialized. note if masterPack[] contains only null values, it contains no
    * objects and therefore must not have been initialized.
    */
   private static void allocateMasterPack()
   {
      int masterPackIndex = 0;

      // Check if masterPack was already initialized, and return if it was
      if (masterPack[masterPackIndex] != null) // masterPack was initialized
      {
         return;
      } 
      else // masterPack was not initialized
      {
         // Assign cards with all unique combos of suits & values to masterPack
         for (Card.Suit suit : Card.Suit.values())
         {
            for (char validCardValue : Card.VALID_CARD_VALUES)
            {
               masterPack[masterPackIndex] = new Card(validCardValue, suit);
               masterPackIndex++;
            }
         }
      }
   }

   /**Method initializes the array of cards with amount equal to value
    * in the argument.
    * @param numPacks amount of packs to be in the cards array
    * */
   public void init(int numPacks)
   {
      // Allocate card array with the total amount of cards
      cards = new Card[numPacks * CARDS_PER_DECK];

      int k = 0, pack = 0;

      // Only allow a valid number of cards in the deck
      if (numPacks < 1 || numPacks > 6)
         numPacks = 1;

      // Add cards to the array by making copies from the master pack
      for (pack = 0; pack < numPacks; pack++)
      {
         for (k = 0; k < CARDS_PER_DECK; k++)
            cards[(pack * CARDS_PER_DECK + k)] = masterPack[k];
      }
      this.numPacks = numPacks;
      topCard = numPacks * CARDS_PER_DECK;
   }
   
   /**Method shuffles deck of cards*/
   public void shuffle()
   {
      for (int i = 0; i < cards.length; i++)
      {
         // Get a random index in the deck
         int randomIndex = (int) (Math.random() * cards.length);

         // Make a copy of the current card
         Card temp = cards[i];

         // Swap the current and the card at the random index
         cards[i] = cards[randomIndex];
         cards[randomIndex] = temp;
      }
   }

   /**
    * Method removes a card object from top of deck 
    * @returns card object form top of deck
    * */
   public Card dealCard()
   {
      Card error = new Card('s', Card.Suit.DIAMONDS);

      if (topCard == 0)
         return error;
      else
         return cards[--topCard];
   }

   /**Method inspects the card at index K
    * @param k index of the card to be inspected
    * @Returns an error card if the card is bad
    * Else returns the card as it is 
    * */  
   public Card inspectCard(int k)
   {
      Card errorCard = new Card('s', Card.Suit.DIAMONDS);

      if (k < 0 || k >= topCard) // The card is bad
         return errorCard;
      else // The card is good
         return cards[k];
   }

   /**Method returns number of cards*/
   public int getNumCards()
   {
      return topCard;
   }

}

/*

-------------------Testing Card Class------------------------

A of Spades
** illegal **
J of Clubs

** illegal **
Q of Spades
J of Clubs
--------------- End of Card Class Test ----------------------

-------------------Testing Hand Class------------------------


Hand = ( 2 of Diamonds, 4 of Hearts, 5 of Spades, 5 of Spades, T of Clubs, 2 of Diamonds, 
4 of Hearts, 5 of Spades, 5 of Spades, T of Clubs, 2 of Diamonds, 4 of Hearts, 
5 of Spades, 5 of Spades, T of Clubs, 2 of Diamonds, 4 of Hearts, 5 of Spades, 
5 of Spades, T of Clubs, 2 of Diamonds, 4 of Hearts, 5 of Spades, 5 of Spades, 
T of Clubs, 2 of Diamonds, 4 of Hearts, 5 of Spades, 5 of Spades, T of Clubs, 
2 of Diamonds, 4 of Hearts, 5 of Spades, 5 of Spades, T of Clubs, 2 of Diamonds, 
4 of Hearts, 5 of Spades, 5 of Spades, T of Clubs, 2 of Diamonds, 4 of Hearts, 
5 of Spades, 5 of Spades, T of Clubs, 2 of Diamonds, 4 of Hearts, 5 of Spades, 
5 of Spades, T of Clubs )

Testing inspectCard()
2 of Diamonds
** illegal **
Playing T of Clubs
Playing 5 of Spades
Playing 5 of Spades
Playing 4 of Hearts
Playing 2 of Diamonds
Playing T of Clubs
Playing 5 of Spades
Playing 5 of Spades
Playing 4 of Hearts
Playing 2 of Diamonds
Playing T of Clubs
Playing 5 of Spades
Playing 5 of Spades
Playing 4 of Hearts
Playing 2 of Diamonds
Playing T of Clubs
Playing 5 of Spades
Playing 5 of Spades
Playing 4 of Hearts
Playing 2 of Diamonds
Playing T of Clubs
Playing 5 of Spades
Playing 5 of Spades
Playing 4 of Hearts
Playing 2 of Diamonds
Playing T of Clubs
Playing 5 of Spades
Playing 5 of Spades
Playing 4 of Hearts
Playing 2 of Diamonds
Playing T of Clubs
Playing 5 of Spades
Playing 5 of Spades
Playing 4 of Hearts
Playing 2 of Diamonds
Playing T of Clubs
Playing 5 of Spades
Playing 5 of Spades
Playing 4 of Hearts
Playing 2 of Diamonds
Playing T of Clubs
Playing 5 of Spades
Playing 5 of Spades
Playing 4 of Hearts
Playing 2 of Diamonds
Playing T of Clubs
Playing 5 of Spades
Playing 5 of Spades
Playing 4 of Hearts
Playing 2 of Diamonds

After playing all cards

Hand = (  )
--------------- End of Hand Class Test ----------------------

-------------------Testing Deck Class------------------------

---- Double pack (Unshuffled) ----

A of Spades, K of Spades, Q of Spades, J of Spades, T of Spades, 
9 of Spades, 8 of Spades, 7 of Spades, 6 of Spades, 5 of Spades, 
4 of Spades, 3 of Spades, 2 of Spades, A of Hearts, K of Hearts, 
Q of Hearts, J of Hearts, T of Hearts, 9 of Hearts, 8 of Hearts, 
7 of Hearts, 6 of Hearts, 5 of Hearts, 4 of Hearts, 3 of Hearts, 
2 of Hearts, A of Diamonds, K of Diamonds, Q of Diamonds, J of Diamonds, 
T of Diamonds, 9 of Diamonds, 8 of Diamonds, 7 of Diamonds, 6 of Diamonds, 
5 of Diamonds, 4 of Diamonds, 3 of Diamonds, 2 of Diamonds, A of Clubs, 
K of Clubs, Q of Clubs, J of Clubs, T of Clubs, 9 of Clubs, 
8 of Clubs, 7 of Clubs, 6 of Clubs, 5 of Clubs, 4 of Clubs, 
3 of Clubs, 2 of Clubs, A of Spades, K of Spades, Q of Spades, 
J of Spades, T of Spades, 9 of Spades, 8 of Spades, 7 of Spades, 
6 of Spades, 5 of Spades, 4 of Spades, 3 of Spades, 2 of Spades, 
A of Hearts, K of Hearts, Q of Hearts, J of Hearts, T of Hearts, 
9 of Hearts, 8 of Hearts, 7 of Hearts, 6 of Hearts, 5 of Hearts, 
4 of Hearts, 3 of Hearts, 2 of Hearts, A of Diamonds, K of Diamonds, 
Q of Diamonds, J of Diamonds, T of Diamonds, 9 of Diamonds, 8 of Diamonds, 
7 of Diamonds, 6 of Diamonds, 5 of Diamonds, 4 of Diamonds, 3 of Diamonds, 
2 of Diamonds, A of Clubs, K of Clubs, Q of Clubs, J of Clubs, 
T of Clubs, 9 of Clubs, 8 of Clubs, 7 of Clubs, 6 of Clubs, 
5 of Clubs, 4 of Clubs, 3 of Clubs, 2 of Clubs


---- Double pack (Shuffled) ----

2 of Hearts, 5 of Spades, 7 of Hearts, K of Clubs, Q of Diamonds, 
3 of Clubs, A of Clubs, J of Spades, 8 of Clubs, J of Clubs, 
J of Diamonds, 7 of Clubs, J of Diamonds, 8 of Hearts, T of Clubs, 
T of Diamonds, 4 of Spades, 4 of Spades, 8 of Hearts, K of Spades, 
K of Diamonds, 9 of Spades, A of Diamonds, 9 of Diamonds, 9 of Clubs, 
6 of Clubs, Q of Spades, 7 of Spades, 6 of Spades, K of Diamonds, 
8 of Spades, 7 of Clubs, 2 of Spades, 4 of Clubs, 9 of Diamonds, 
3 of Spades, 7 of Diamonds, 5 of Clubs, 4 of Hearts, 3 of Hearts, 
2 of Clubs, 5 of Spades, 4 of Diamonds, 5 of Diamonds, 6 of Spades, 
J of Spades, 5 of Hearts, A of Hearts, 9 of Hearts, 6 of Diamonds, 
7 of Hearts, A of Diamonds, T of Spades, 4 of Hearts, Q of Clubs, 
6 of Clubs, T of Hearts, 2 of Hearts, Q of Clubs, J of Hearts, 
T of Hearts, 2 of Diamonds, 8 of Diamonds, 6 of Hearts, 2 of Diamonds, 
Q of Hearts, T of Diamonds, Q of Spades, Q of Hearts, 9 of Hearts, 
7 of Diamonds, 2 of Clubs, J of Hearts, 5 of Hearts, 9 of Spades, 
K of Hearts, 3 of Hearts, 4 of Diamonds, T of Spades, J of Clubs, 
A of Hearts, 3 of Spades, 3 of Diamonds, K of Spades, 5 of Clubs, 
7 of Spades, T of Clubs, 6 of Hearts, 3 of Diamonds, 5 of Diamonds, 
8 of Clubs, K of Clubs, 3 of Clubs, A of Spades, A of Clubs, 
8 of Spades, 6 of Diamonds, A of Spades, 9 of Clubs, Q of Diamonds, 
8 of Diamonds, 2 of Spades, K of Hearts, 4 of Clubs


---- Single pack (Unshuffled) ---- 

A of Spades, K of Spades, Q of Spades, 
J of Spades, T of Spades, 9 of Spades, 8 of Spades, 7 of Spades, 
6 of Spades, 5 of Spades, 4 of Spades, 3 of Spades, 2 of Spades, 
A of Hearts, K of Hearts, Q of Hearts, J of Hearts, T of Hearts, 
9 of Hearts, 8 of Hearts, 7 of Hearts, 6 of Hearts, 5 of Hearts, 
4 of Hearts, 3 of Hearts, 2 of Hearts, A of Diamonds, K of Diamonds, 
Q of Diamonds, J of Diamonds, T of Diamonds, 9 of Diamonds, 8 of Diamonds, 
7 of Diamonds, 6 of Diamonds, 5 of Diamonds, 4 of Diamonds, 3 of Diamonds, 
2 of Diamonds, A of Clubs, K of Clubs, Q of Clubs, J of Clubs, 
T of Clubs, 9 of Clubs, 8 of Clubs, 7 of Clubs, 6 of Clubs, 
5 of Clubs, 4 of Clubs, 3 of Clubs, 2 of Clubs


---- Single pack (Shuffled) ----

7 of Clubs, 6 of Hearts, 4 of Clubs, 
9 of Diamonds, 4 of Spades, 4 of Diamonds, 3 of Hearts, 4 of Hearts, 
3 of Clubs, T of Spades, K of Spades, T of Hearts, 2 of Clubs, 
7 of Hearts, 3 of Spades, T of Clubs, Q of Diamonds, 8 of Spades, 
6 of Spades, 2 of Hearts, A of Spades, K of Hearts, Q of Spades, 
9 of Spades, 2 of Diamonds, 6 of Diamonds, 3 of Diamonds, A of Hearts, 
Q of Hearts, J of Hearts, A of Diamonds, 2 of Spades, 5 of Spades, 
J of Clubs, 5 of Hearts, 5 of Clubs, T of Diamonds, 9 of Clubs, 
K of Clubs, 8 of Clubs, 5 of Diamonds, 8 of Diamonds, 8 of Hearts, 
6 of Clubs, A of Clubs, J of Diamonds, 7 of Spades, 9 of Hearts, 
K of Diamonds, 7 of Diamonds, J of Spades, Q of Clubs


--------------- End of Deck Class Test ----------------------

Please select the number of players (from 1 to 10):
3

---------- Here are your hands from an unshuffled deck ----------

----- Hand 1 -----

Hand = ( A of Spades, J of Spades, 8 of Spades, 5 of Spades, 2 of Spades, Q of Hearts, 
9 of Hearts, 6 of Hearts, 3 of Hearts, K of Diamonds, T of Diamonds, 7 of Diamonds, 
4 of Diamonds, A of Clubs, J of Clubs, 8 of Clubs, 5 of Clubs, 2 of Clubs )


----- Hand 2 -----

Hand = ( K of Spades, T of Spades, 7 of Spades, 4 of Spades, A of Hearts, J of Hearts, 
8 of Hearts, 5 of Hearts, 2 of Hearts, Q of Diamonds, 9 of Diamonds, 6 of Diamonds, 
3 of Diamonds, K of Clubs, T of Clubs, 7 of Clubs, 4 of Clubs )

----- Hand 3 -----

Hand = ( Q of Spades, 9 of Spades, 6 of Spades, 3 of Spades, K of Hearts, T of Hearts, 
7 of Hearts, 4 of Hearts, A of Diamonds, J of Diamonds, 8 of Diamonds, 5 of Diamonds, 
2 of Diamonds, Q of Clubs, 9 of Clubs, 6 of Clubs, 3 of Clubs )

---------- Here are your hands from a shuffled deck ----------

----- Hand 1 -----

Hand = ( 5 of Diamonds, 2 of Diamonds, T of Diamonds, 4 of Diamonds, 3 of Spades, 6 of Spades, 
T of Spades, 3 of Clubs, T of Clubs, 2 of Hearts, A of Diamonds, J of Clubs, 
9 of Spades, 8 of Diamonds, 4 of Spades, 6 of Hearts, K of Clubs, T of Hearts )


----- Hand 2 -----

Hand = ( 5 of Spades, 7 of Diamonds, J of Hearts, K of Spades, Q of Clubs, J of Spades, 
Q of Hearts, Q of Spades, 9 of Diamonds, A of Spades, 4 of Hearts, 8 of Spades, 
Q of Diamonds, 8 of Hearts, 4 of Clubs, 6 of Diamonds, A of Clubs )

----- Hand 3 -----

Hand = ( 3 of Hearts, 8 of Clubs, A of Hearts, K of Diamonds, 2 of Clubs, K of Hearts, 
9 of Hearts, 7 of Clubs, 7 of Spades, 5 of Hearts, 7 of Hearts, 5 of Clubs, 
3 of Diamonds, 9 of Clubs, 2 of Spades, 6 of Clubs, J of Diamonds )


 */

